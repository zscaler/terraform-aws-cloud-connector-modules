#!/usr/bin/env bash

set -eo pipefail

usage()
{
    echo "Usage: $0 <up|destroy>"
    exit 1
}

if [ $# -ne 1 ] ; then
    usage
else
    case $1 in
      up|destroy|do)
          oper=$1
      ;;
      *)
          usage
      ;;
    esac
fi

if [[ "$oper" == "up" || "destroy" ]]; then
    # shellcheck disable=SC2153
    if [ -z "$DTYPE" ]; then
    while true; do
     read -r -p "Deployment: ( greenfield | brownfield ): " deploy

    case $deploy in
      greenfield)
          break
      ;;
      brownfield)
          break
      ;;    
      *)
          echo "Invalid Deployment Type: ${dtype}"
      ;;
    esac
  done

    while [ "$deploy" == "greenfield" ]; do
     read -r -p "Deployment Type: ( base | base_1cc | base_1cc_zpa | base_2cc | base_2cc_zpa | base_cc_gwlb | base_cc_gwlb_zpa ): " dtype

    case $dtype in
      base|base_1cc|base_1cc_zpa|base_2cc|base_2cc_zpa|base_cc_gwlb|base_cc_gwlb_zpa)
          echo "Deployment Type: ${dtype}"
          break
      ;;
      *)
          echo "Invalid Deployment Type: ${dtype}"
      ;;
    esac
  done

  while [ "$deploy" == "brownfield" ]; do
     read -r -p "Deployment Type: ( cc_ha | cc_gwlb ) : " dtype

    case $dtype in
      cc_ha|cc_gwlb)
          echo "Deployment Type: ${dtype}"
          break
      ;;
      *)
          echo "Invalid Deployment Type: ${dtype}"
      ;;
    esac
  done
    else
      dtype=$DTYPE
    fi
fi


echo "Discovering processor architecture..."
archdetect=$(uname -m)

tversion=1.1.9
echo "Detecting OS..."
if [[ "$OSTYPE" == "linux"* ]]; then
    os_str=linux
    arch=amd64
    ostype=Linux
elif [[ "$OSTYPE" == "darwin"* && $archdetect == "arm64" ]]; then
    os_str=darwin
    arch=arm64
    ostype=MacOS_arm64
elif [[ "$OSTYPE" == "darwin"* ]]; then
    os_str=darwin
    arch=amd64
    ostype=MacOS
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    os_str=freebsd
    arch=amd64
    ostype=FreeBSD
    echo "FreeBSD support coming soon..."
    exit 1
else
    echo "Unsupported OS: $OSTYPE"
    exit 1
fi
echo "OS is $ostype"

dir=bin
echo "Creating a local $dir directory if not present..."
if [[ ! -e $dir ]]; then
    mkdir $dir
elif [[ ! -d $dir ]]; then
    echo "$dir already exists but is not a directory" 1>&2
    exit 1
fi


echo "Checking AWS Environment Variables..."
    # Checking for AWS MFA required
    while true; do
    read -r -p "Is an AWS MFA session token generation required? (yes/no): " mfa_response
case $mfa_response in 
	yes|y ) 
    echo "MFA enabled"
    mfa_enabled=true
    break
    ;;
	no|n )
    echo "MFA not enabled. Proceeding..."
    mfa_enabled=false
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done 

aws_regions=["af-south-1","ap-east-1","ap-northeast-1","ap-northeast-2","ap-northeast-3","ap-south-1","ap-southeast-1","ap-southeast-2","ca-central-1","cn-north-1","cn-northwest-1","eu-central-1","eu-north-1","eu-south-1","eu-west-1","eu-west-2","eu-west-3","me-south-1","sa-east-1","us-east-1","us-east-2","us-gov-east-1","us-gov-west-1","us-west-1","us-west-2"]
# if .zsecrc is not present we'll assume that AWS env was never set
if [[ $dtype == "base" && ! -e ./.zsecrc ]]; then
    # Get MFA session token
    if [[ $mfa_enabled == true ]]; then
    echo "Gathering information to get AWS Session Token. We need the following details:"
    echo "example - arn:aws:iam::1234567890:mfa/user@company.com where Account ID = 1234567890 and User Account = user@company.com"
    read -r -p "Enter AWS Account ID: " aws_account_id
    read -r -p "Enter AWS MFA User account: " aws_user_account
    echo "unsetting existing AWS Environment variables (unset AWS_SESSION_TOKEN AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY)"
    unset AWS_SESSION_TOKEN AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    read -r -p "Enter token code from MFA device: " mfa_token
    echo "getting session token (aws sts get-session-token --serial-number arn:aws:iam::${aws_account_id}:mfa/${aws_user_account} --token-code)"
    aws sts get-session-token --serial-number arn:aws:iam::${aws_account_id}:mfa/${aws_user_account} --token-code ${mfa_token}  

    read -r -p "Enter AWS Session Token: " aws_session_token
    fi
    read -r -p "Enter AWS Access Key ID: " aws_key
    read -r -p "Enter AWS Secret Access Key: " aws_secret
    read -r -p "Enter AWS Region (e.g. us-west-2): " aws_region
    if [[ ${aws_regions[*]} =~ $aws_region ]]; then
    echo "export TF_VAR_arm_location=${aws_region}" >> .zsecrc
    else
    echo "Invalid AWS region name entered."
    echo "Delete .zsecrc file and re-run zsec up..."
    exit 1
    fi
    echo "export AWS_ACCESS_KEY_ID=${aws_key}" > .zsecrc
    echo "export AWS_SECRET_ACCESS_KEY=${aws_secret}" >> .zsecrc
    echo "export AWS_DEFAULT_REGION=${aws_region}" >> .zsecrc
    echo "export TF_VAR_aws_region=${aws_region}" >> .zsecrc

    while [[ "$dtype" == "base" && "$oper" == "up" ]]; do
clientpublicip=$(curl -s ifconfig.me)
    echo "greenfield deployments include a publicly accessible ssh bastion host.."
    read -r -p "Your current public IP is ${clientpublicip}. Lock SSH access to this IP? [yes/no] " bastion_response
case $bastion_response in 
	yes|y ) 
    echo "Updating Bastion NSG to permit SSH only from ${clientpublicip}: "
    echo "export TF_VAR_bastion_nsg_source_prefix='[\"${clientpublicip}/32\"]'" >> .zsecrc
    useclientip=true
    break
    ;;
	no|n )
    read -r -p "Lock SSH access to a different IP address or range? Default is open any [yes/no]: " changebastionip
    useclientip=false
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done

if [[ "$useclientip" == "false" ]]; then
while true; do
case $changebastionip in 
	yes|y ) 
    read -r -p "Enter new IP Address/range w/ CIDR (e.g. 2.2.2.2/32): " bastionipinput
    echo "export TF_VAR_bastion_nsg_source_prefix='[\"${bastionipinput}\"]'" >> .zsecrc

   
if [[ $bastionipinput =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]
then
if [[ $bastionipinput =~ /[0-9]{1,2}$ ]]; then
echo "$bastionipinput - IP/Netmask valid"
else
echo "netmask not present or invalid"
exit
fi
else
echo "$bastionipinput is not valid"
exit 1
fi
    break
    ;;
	no|n )
    echo "SSH access permitted for all IP addresses..." 
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done
fi

fi



echo "Checking AWS Environment Variables and Cloud Connector bootstrap requirements... For ZPA or brownfield/byo deployments, please stop and refer to the README and terraform.tfvars file instructions"
# if .zsecrc is not present we'll assume that AWS env was never set
if [[ "$oper" == "up" && $dtype != base && ! -e ./.zsecrc ]]; then
    # Get MFA session token
    if [[ $mfa_enabled == true ]]; then
    echo "Gathering information to get AWS Session Token. We need the following details:"
    echo "example - arn:aws:iam::1234567890:mfa/user@company.com where Account ID = 1234567890 and User Account = user@company.com"
    read -r -p "Enter AWS Account ID: " aws_account_id
    read -r -p "Enter AWS MFA User account: " aws_user_account
    echo "unsetting existing AWS Environment variables (unset AWS_SESSION_TOKEN AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY)"
    unset AWS_SESSION_TOKEN AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    read -r -p "Enter token code from MFA device: " mfa_token
    echo "getting session token (aws sts get-session-token --serial-number arn:aws:iam::${aws_account_id}:mfa/${aws_user_account} --token-code)"
    aws sts get-session-token --serial-number arn:aws:iam::${aws_account_id}:mfa/${aws_user_account} --token-code ${mfa_token}
 
    read -r -p "Enter AWS Session Token: " aws_session_token
    fi
    read -r -p "Enter AWS Access Key ID: " aws_key
    read -r -p "Enter AWS Secret Access Key: " aws_secret
    read -r -p "Enter AWS Region (e.g. us-west-2): " aws_region
    if [[ ${aws_regions[*]} =~ $aws_region ]]; then
    echo "export TF_VAR_arm_location=${aws_region}" >> .zsecrc
    else
    echo "Invalid AWS region name entered."
    echo "Delete .zsecrc file and re-run zsec up..."
    exit 1
    fi
    echo "export AWS_ACCESS_KEY_ID=${aws_key}" > .zsecrc
    echo "export AWS_SECRET_ACCESS_KEY=${aws_secret}" >> .zsecrc
    echo "export AWS_DEFAULT_REGION=${aws_region}" >> .zsecrc
    echo "export TF_VAR_aws_region=${aws_region}" >> .zsecrc
    
    while [[ "$dtype" == "base"* && "$oper" == "up" ]]; do
clientpublicip=$(curl -s ifconfig.me)
    echo "greenfield deployments include a publicly accessible ssh bastion host.."
    read -r -p "Your current public IP is ${clientpublicip}. Lock SSH access to this IP? [yes/no] " bastion_response
case $bastion_response in 
	yes|y ) 
    echo "Updating Bastion NSG to permit SSH only from ${clientpublicip}: "
    echo "export TF_VAR_bastion_nsg_source_prefix='[\"${clientpublicip}/32\"]'" >> .zsecrc
    useclientip=true
    break
    ;;
	no|n )
    read -r -p "Lock SSH access to a different IP address or range? Default is open any [yes/no]: " changebastionip
    useclientip=false
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done

if [[ "$useclientip" == "false" ]]; then
while true; do
case $changebastionip in 
	yes|y ) 
    read -r -p "Enter new IP Address/range w/ CIDR (e.g. 2.2.2.2/32): " bastionipinput
    echo "export TF_VAR_bastion_nsg_source_prefix='[\"${bastionipinput}\"]'" >> .zsecrc

   
if [[ $bastionipinput =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]
then
if [[ $bastionipinput =~ /[0-9]{1,2}$ ]]; then
echo "$bastionipinput - IP/Netmask valid"
else
echo "netmask not present or invalid"
exit
fi
else
echo "$bastionipinput is not valid"
exit 1
fi
    break
    ;;
	no|n )
    echo "SSH access permitted for all IP addresses..." 
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done
fi

    cc_instance_size_default=small
    read -r -p "Enter CC Instance Size. Valid input = small, medium, or large. This needs to match the size chosen in the CC provisioning template [Default=$cc_instance_size_default]: " cc_instance_size_input
cc_instance_size=${cc_instance_size_input:-$cc_instance_size_default}
    case $cc_instance_size in
      small|medium|large)
          echo "Cloud Connector size: ${cc_instance_size}"
          echo "export TF_VAR_cc_instance_size=${cc_instance_size}" >> .zsecrc
      ;;
      *)
          echo "Invalid Cloud Connector size: ${cc_instance_size}."
          echo "Delete .zsecrc file and re-run zsecup ..."
          exit 1
      ;;
    esac
ccvm_instance_type_default=m5.large
while true; do
    read -r -p "Enter desired AWS EC2 instance type for CC. Recommended types: Small CC (m5.large or c5.large); Medium (m5.2xlarge or c5.2xlarge); Large (m5.4xlarge or c5.4xlarge) [Default=$ccvm_instance_type_default]: " ccvm_instance_type_input
ccvm_instance_type=${ccvm_instance_type_input:-$ccvm_instance_type_default}    
    case $ccvm_instance_type in
      t3.medium|m5.large|c5.large|c5a.large|m5.2xlarge|c5.2xlarge|m5.4xlarge|c5.4xlarge)
          echo "CC EC2 type: ${ccvm_instance_type}"
          echo "export TF_VAR_ccvm_instance_type=${ccvm_instance_type}" >> .zsecrc
          break
      ;;
      *)
          echo "Invalid Cloud Connector VM type: ${ccvm_instance_type}. Please enter an approved VM type"
      ;;
    esac
done

small_cc_instance=("t3.medium" "m5.large" "c5.large" "c5a.large" "m5.2xlarge" "c5.2xlarge" "m5.4xlarge" "c5.4xlarge")
medium_cc_instance=("m5.2xlarge" "c5.2xlarge" "m5.4xlarge" "c5.4xlarge")
large_cc_instance=("m5.4xlarge" "c5.4xlarge")

if [[ ${small_cc_instance[*]} =~ $ccvm_instance_type && "$cc_instance_size" == small ]]; then
echo "Proceeding. ${ccvm_instance_type} compatible with ${cc_instance_size} Cloud Connector size"
elif [[ ${medium_cc_instance[*]} =~ $ccvm_instance_type && "$cc_instance_size" == medium ]]; then
echo "Proceeding. ${ccvm_instance_type} compatible with ${cc_instance_size} Cloud Connector size"
elif [[ ${large_cc_instance[*]} =~ $ccvm_instance_type && "$cc_instance_size" == large ]]; then
echo "Proceeding. ${ccvm_instance_type} compatible with ${cc_instance_size} Cloud Connector size"
elif [[ $dtype == base ]]; then
echo "Proceeding with no CCs to deploy"
else
    echo "Invalid CC deployment. ${ccvm_instance_type} not compatible with ${cc_instance_size} Cloud Connector size"
    echo "Delete .zsecrc file and re-run zsec up..."
    exit 1
fi
    read -r -p "Enter CC Provisioning URL (E.g. connector.zscaler.net/api/v1/provUrl?name=aws_prov_url): " cc_vm_prov_url
    echo "Provisioning URL entered is: $cc_vm_prov_url. Make sure this matches the CC Instance Size $cc_instance_size chosen."
    echo "export TF_VAR_cc_vm_prov_url=${cc_vm_prov_url}" >> .zsecrc
    read -r -p "Enter AWS Secrets Manager Secret Name from Secrets Manager (E.g ZS/CC/credentials/aws_cc_secret_name): " secret_name
    echo "Secret Manager name entered is: $secret_name"
    echo "export TF_VAR_secret_name=${secret_name}" >> .zsecrc
http_probe_port_default=50000
    read -r -p "Enter CC service health probe TCP port number. Valid input = 80 or any number between 1024-65535 [Default=$http_probe_port_default]: " http_probe_port_input
http_probe_port=${http_probe_port_input:-$http_probe_port_default}
if ((http_probe_port == 80 || http_probe_port >= 1024 && http_probe_port <= 65535)); then
    echo "Valid HTTP probe port input of $http_probe_port"
    echo "export TF_VAR_http_probe_port=${http_probe_port}" >> .zsecrc
else
    echo "Invalid HTTP probe port value"
    echo "Delete .zsecrc file and re-run zsec up..."
    exit 1
fi

cc_count_default=2
if [[ "$dtype" == "base_1"* ]]; then
    echo "${dtype} will deploy one Cloud Connector in ${aws_region}"  
elif [[ "$dtype" == "base_2"* || "$dtype" == "cc_ha" ]]; then  
    echo "${dtype} will deploy two Cloud Connectors in ${aws_region}"  
elif [[ "$dtype" == *"gwlb"* ]]; then
    read -p "Enter how many Cloud Connectors to deploy? [Default=$cc_count_default]: " cc_count_input
cc_count=${cc_count_input:-$cc_count_default}
if ((cc_count >= 1 && cc_count <= 20)); then
    echo "${dtype} will deploy ${cc_count} Cloud Connectors in ${aws_region}"
    echo "export TF_VAR_cc_count=${cc_count}" >> .zsecrc
else
    echo "invalid cc_count value. Must be a number between 1 and 20"
    echo "Delete .zsecrc file and re-run zsec up..."
    exit 1
fi  
fi

az_count_default=2
if [[ "$dtype" == "base_1"* || "$dtype" == "base" ]]; then
    echo "${dtype} will deploy resources in one Availability Zone subnet in ${aws_region}"  
else
    read -r -p "Enter how many Availability Zone subnets [1-3] to deploy across? [Default=$az_count_default]: " az_count_input
az_count=${az_count_input:-$az_count_default}
if ((az_count >= 1 && az_count <= 3)); then
    echo "${dtype} will deploy ${cc_count} Cloud Connectors across ${az_count} Availabiliy Zone subnets in ${aws_region}"
    echo "export TF_VAR_az_count=${az_count}" >> .zsecrc
else
    echo "invalid az_count value. Must be a number between 1 and 3"
    echo "Delete .zsecrc file and re-run zsec up..."
    exit 1
fi  
fi

if [[ "$dtype" == *"gwlb"* ]]; then
    echo "GWLB deployment detected"
    read -r -p "Enable GWLB cross-zone loadbalancing? (yes/no): " cross_zone_lb_enabled

    while true; do
case $cross_zone_lb_enabled in 
	yes|y ) 
    echo "Cross-zone loadbalancing enabled"
    cross_zone_lb_enabled=true
    break
    ;;
	no|n )
    echo "Cross-zone loadbalancing disabled"
    cross_zone_lb_enabled=false
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done 

fi
fi


# add local bin directory to PATH
if ! grep -Fxq "export PATH=\${PATH}:\${PWD}/bin" .zsecrc; then
    echo "export PATH=${PATH}:${PWD}/bin" >> .zsecrc
fi


# initialize environment variables
. ./.zsecrc

# check for valid environment variables in .zsecrc
if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$AWS_DEFAULT_REGION" ]; then
    echo "AWS Access info is missing. Remove .zsecrc file and rerun $0 $1"
    exit 1
fi

if [[ $dtype != "base" ]]; then
    echo "Checking Cloud Connector provisioning info"
  if [ -z "$TF_VAR_cc_vm_prov_url" ] || [ -z "$TF_VAR_secret_name" ] || [ -z "$TF_VAR_http_probe_port" ] || [ -z "$TF_VAR_cc_instance_size" ] || [ -z "$TF_VAR_ccvm_instance_type" ]; then
    echo "Cloud Connector provisioning info is missing. Remove .zsecrc file and rerun $0 $1"
    exit 1
  fi
fi

# Get new MFA session token
if [[ $mfa_enabled == true ]]; then
    if [ -z "$AWS_SESSION_TOKEN" ]; then
    echo "export AWS_SESSION_TOKEN=${aws_session_token}" >> .zsecrc 
    echo "export AWS_SESSION_TOKEN=${aws_session_token}"
else
    echo "zsecrc file has existing session token. Resetting to ensure credentials are refreshed"
    echo "unsetting existing AWS Environment variables (unset AWS_SESSION_TOKEN AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY)"
    unset AWS_SESSION_TOKEN AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    echo "backup .zsecrc to .zsecrc.bak"
    cp .zsecrc .zsecrc.bak
    echo "Updating .zsecrc"
    sed '/AWS_SESSION_TOKEN\|AWS_ACCESS_KEY_ID\|AWS_SECRET_ACCESS_KEY/d' .zsecrc > .zsecrcnew && mv .zsecrcnew .zsecrc
    echo "example - arn:aws:iam::1234567890:mfa/user@company.com where Account ID = 1234567890 and User Account = user@company.com"
    read -r -p "Enter AWS Account ID: " aws_account_id
    read -r -p "Enter AWS MFA User account: " aws_user_account
    read -r -p "Enter token code from MFA device: " mfa_token
    echo "getting session token (aws sts get-session-token --serial-number arn:aws:iam::${aws_account_id}:mfa/${aws_user_account} --token-code)"
    aws sts get-session-token --serial-number arn:aws:iam::${aws_account_id}:mfa/${aws_user_account} --token-code ${mfa_token}
 
    read -r -p "Enter AWS Session Token: " aws_session_token
    echo "export AWS_SESSION_TOKEN=${aws_session_token}" >> .zsecrc
    echo "export AWS_SESSION_TOKEN=${aws_session_token}"
    read -r -p "Enter AWS Access Key ID: " aws_key
    read -r -p "Enter AWS Secret Access Key: " aws_secret
    echo "export AWS_ACCESS_KEY_ID=${aws_key}" >> .zsecrc
    echo "export AWS_SECRET_ACCESS_KEY=${aws_secret}" >> .zsecrc
fi    
    # Reinitialize environment variables
. ./.zsecrc
fi


echo "Download terraform binary for $ostype if not present..."
if [[ ! -e ./$dir/terraform ]]; then
    curl -o ./$dir/terraform_${tversion}_${arch}.zip https://releases.hashicorp.com/terraform/$tversion/terraform_${tversion}_${os_str}_${arch}.zip
    unzip ./$dir/terraform_${tversion}_${arch}.zip -d ./$dir
    rm -f ./$dir/terraform_${tversion}_${arch}.zip
fi

if [[ "$oper" == "do" ]]; then
    exit 1
fi

if [[ "$oper" == "up" ]]; then
    echo "Bringing up Cloud Connector cluster..."
    TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" init
    if [[ "$AUTO_APPROVE" ]]; then
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" apply -auto-approve
    else
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" apply
    fi
   

elif [[ "$oper" == "destroy" ]]; then
    echo "Destroying Edge Connector cluster..."
    TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" init
    if [[ "$AUTO_APPROVE" ]]; then
      TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" destroy -auto-approve
    else
      TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" destroy -compact-warnings
    fi
    rm -rf bin 
    rm -rf **/.terraform/* && rm -rf **/.terraform*
	find . -type f -name '.terraform.lock.hcl' -delete
    rm -rf .terraform* && rm -f terraform.tfstate*
    rm -f *.pem && rm -f *.pem.pub
    rm -f name_prefix random_string
    rm -rf user.key user.crt
    rm -rf systems.json setup-*.tar
    rm -rf **/errorlog.txt
fi